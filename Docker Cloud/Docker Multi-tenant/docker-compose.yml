version: '3.8'

services:
  # Tenant A - Python Flask Application
  tenant-a:
    build: ./tenant-a
    container_name: tenant-a-compose
    networks:
      - tenant-a-network
      - shared-services-network
    ports:
      - "8091:5000"
    environment:
      - PORT=5000
      - TENANT_ID=A
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs

  # Tenant B - Node.js Application
  tenant-b:
    build: ./tenant-b
    container_name: tenant-b-compose
    networks:
      - tenant-b-network
    ports:
      - "8092:3000"
    environment:
      - PORT=3000
      - TENANT_ID=B
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs

  # Tenant C - Nginx Static Site
  tenant-c:
    build: ./tenant-c
    container_name: tenant-c-compose
    networks:
      - tenant-c-network
    ports:
      - "8093:80"
    environment:
      - TENANT_ID=C
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Shared Database
  shared-database:
    image: postgres:13
    container_name: shared-db-compose
    networks:
      - shared-services-network
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=multitenantdb
      - POSTGRES_USER=dbadmin
      - POSTGRES_PASSWORD=securepassword123
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared-configs/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbadmin -d multitenantdb"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Reverse Proxy (Nginx)
  reverse-proxy:
    image: nginx:alpine
    container_name: reverse-proxy-compose
    networks:
      - tenant-a-network
      - tenant-b-network
      - tenant-c-network
    ports:
      - "80:80"
    volumes:
      - ./shared-configs/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - tenant-a
      - tenant-b
      - tenant-c
    restart: unless-stopped

networks:
  tenant-a-network:
    driver: bridge
  tenant-b-network:
    driver: bridge
  tenant-c-network:
    driver: bridge
  shared-services-network:
    driver: bridge

volumes:
  postgres_data: