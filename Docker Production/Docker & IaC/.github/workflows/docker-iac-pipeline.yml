name: Docker IaC Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: docker-iac-web

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./web-app
        push: false
        tags: ${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 5000:5000 ${{ env.IMAGE_NAME }}:test
        sleep 10
        curl -f http://localhost:5000/health || exit 1
        docker stop test-container
        docker rm test-container

  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push staging image
      uses: docker/build-push-action@v5
      with:
        context: ./web-app
        push: false
        tags: ${{ env.IMAGE_NAME }}:staging
        cache-from: type=gha

    - name: Deploy to staging with docker-compose
      run: |
        export ENVIRONMENT=staging
        docker-compose -f docker-compose.staging.yml up -d
        
    - name: Run staging tests
      run: |
        sleep 30
        curl -f http://localhost/health || exit 1

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build production image
      uses: docker/build-push-action@v5
      with:
        context: ./web-app
        push: false
        tags: ${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha

    - name: Deploy with Terraform
      run: |
        cd infrastructure
        terraform init
        terraform plan -out=tfplan
        terraform apply tfplan

    - name: Run production health checks
      run: |
        sleep 30
        curl -f http://localhost:5001/health || exit 1
        curl -f http://localhost:5002/health || exit 1