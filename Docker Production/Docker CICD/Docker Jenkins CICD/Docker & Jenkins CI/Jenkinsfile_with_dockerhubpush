pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'jenkins-docker-demo'
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKER_REGISTRY = 'your-dockerhub-username'  // Replace with your Docker Hub username
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    sh 'rm -rf jenkins-docker-demo || true'
                    sh 'git clone ~/jenkins-docker-demo.git jenkins-docker-demo'
                    dir('jenkins-docker-demo') {
                        sh 'ls -la'
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('jenkins-docker-demo') {
                    script {
                        def image = docker.build("${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}")
                        sh "docker tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest"
                        echo "Docker image built successfully: ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }
        
        stage('Run Tests in Container') {
            steps {
                dir('jenkins-docker-demo') {
                    script {
                        sh """
                            docker run --rm \
                                -v \$(pwd):/app \
                                -w /app \
                                node:16-alpine \
                                sh -c 'npm install && npm test'
                        """
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                dir('jenkins-docker-demo') {
                    script {
                        sh """
                            echo "Running basic security checks..."
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                aquasec/trivy:latest image ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG} || true
                        """
                    }
                }
            }
        }
        
        stage('Integration Test') {
            steps {
                dir('jenkins-docker-demo') {
                    script {
                        sh """
                            docker run -d --name test-app-${BUILD_NUMBER} \
                                -p 3001:3000 ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}
                            
                            sleep 10
                            
                            curl -f http://localhost:3001/ || exit 1
                            curl -f http://localhost:3001/health || exit 1
                            
                            echo "Integration tests passed!"
                        """
                    }
                }
            }
            post {
                always {
                    sh "docker stop test-app-${BUILD_NUMBER} || true"
                    sh "docker rm test-app-${BUILD_NUMBER} || true"
                }
            }
        }
        
        stage('Push to Docker Hub') {
            when {
                branch 'master'  // Only push on master branch
            }
            steps {
                script {
                    docker.withRegistry('https://registry-1.docker.io/v2/', 'dockerhub-credentials') {
                        // Push both tagged and latest versions
                        sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                        sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest"
                        
                        echo "Successfully pushed to Docker Hub:"
                        echo "- ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                        echo "- ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'master'
            }
            steps {
                script {
                    // Deploy to staging environment
                    sh """
                        echo "Deploying to staging environment..."
                        
                        # Stop existing staging container if running
                        docker stop staging-app || true
                        docker rm staging-app || true
                        
                        # Start new staging container
                        docker run -d --name staging-app \
                            -p 3002:3000 \
                            --restart unless-stopped \
                            ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}
                        
                        # Verify deployment
                        sleep 5
                        curl -f http://localhost:3002/health
                        
                        echo "Staging deployment successful!"
                        echo "Application available at: http://localhost:3002"
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Clean up local images to save space
            sh """
                docker image prune -f
                docker system prune -f
            """
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
            echo 'Docker image pushed to Docker Hub and deployed to staging.'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
            // Clean up any hanging containers
            sh """
                docker stop test-app-${BUILD_NUMBER} || true
                docker rm test-app-${BUILD_NUMBER} || true
                docker stop staging-app || true
            """
        }
    }
}