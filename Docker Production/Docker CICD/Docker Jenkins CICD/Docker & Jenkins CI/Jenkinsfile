pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'sample-node-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        SONARQUBE_SERVER = 'SonarQube'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        sonar-scanner \
                        -Dsonar.projectKey=sample-node-app \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.exclusions=node_modules/**
                    '''
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh '''
                    echo "Building Docker image..."
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    docker build -t ${DOCKER_IMAGE}:latest .
                '''
            }
        }
        
        stage('Test Docker Image') {
            steps {
                sh '''
                    echo "Testing Docker image..."
                    docker run -d --name test-container-${BUILD_NUMBER} -p 3001:3000 ${DOCKER_IMAGE}:${DOCKER_TAG}
                    
                    sleep 10
                    
                    curl -f http://localhost:3001/health || exit 1
                    curl -f http://localhost:3001/ || exit 1
                    
                    echo "Tests passed!"
                '''
            }
            post {
                always {
                    sh '''
                        docker stop test-container-${BUILD_NUMBER} || true
                        docker rm test-container-${BUILD_NUMBER} || true
                    '''
                }
            }
        }
        
        stage('Deploy') {
            steps {
                sh '''
                    echo "Deploying application..."
                    docker stop sample-app-prod || true
                    docker rm sample-app-prod || true
                    
                    docker run -d --name sample-app-prod -p 3000:3000 ${DOCKER_IMAGE}:${DOCKER_TAG}
                    
                    echo "Application deployed successfully!"
                '''
            }
        }
    }
    
    post {
        always {
            sh '''
                docker images ${DOCKER_IMAGE} --format "table {{.Repository}}:{{.Tag}}" | tail -n +2 | head -n -5 | xargs -r docker rmi || true
            '''
        }
        success {
            echo 'Pipeline completed successfully!'
            emailext (
                subject: "Build Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                body: "The build completed successfully. Check console output at ${env.BUILD_URL}",
                to: "admin@example.com"
            )
        }
        failure {
            echo 'Pipeline failed!'
            emailext (
                subject: "Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                body: "The build failed. Check console output at ${env.BUILD_URL}",
                to: "admin@example.com"
            )
        }
    }
}