name: Docker CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_IMAGE_NAME: docker-cicd-demo
  DOCKER_REGISTRY: docker.io

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run unit tests
      run: |
        npm start &
        APP_PID=$!
        sleep 5
        npm test
        kill $APP_PID
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.DOCKER_IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run -d -p 3000:3000 --name test-container ${{ env.DOCKER_IMAGE_NAME }}:test
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        docker stop test-container
        docker rm test-container
    
    # New Docker Compose testing steps
    - name: Create test environment with Docker Compose
      run: |
        # Update docker-compose.yml to use the test image
        sed -i 's/build: \./image: ${{ env.DOCKER_IMAGE_NAME }}:test/' docker-compose.yml
    
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        sleep 15
    
    - name: Test Docker Compose services
      run: |
        # Test direct app access
        curl -f http://localhost:3000/health || exit 1
        echo "✅ Direct app access successful"
        
        # Test nginx proxy access
        curl -f http://localhost:8080/health || exit 1
        echo "✅ Nginx proxy access successful"
        
        # Test app functionality
        response=$(curl -s http://localhost:3000/)
        echo "App response: $response"
        
        # Verify response contains expected content
        if echo "$response" | grep -q "Hello from Docker CI/CD Demo"; then
          echo "✅ App functionality test passed"
        else
          echo "❌ App functionality test failed"
          exit 1
        fi
    
    - name: Check service logs
      if: always()
      run: |
        echo "=== App Service Logs ==="
        docker-compose logs app
        echo "=== Nginx Service Logs ==="
        docker-compose logs nginx
    
    - name: Cleanup Docker Compose
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f

  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Post-deployment verification
    - name: Verify pushed image
      run: |
        # Pull the image we just pushed
        docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        
        # Quick test of the pulled image
        docker run -d -p 3001:3000 --name verify-container ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        sleep 10
        curl -f http://localhost:3001/health || exit 1
        echo "✅ Pushed image verification successful"
        
        # Cleanup
        docker stop verify-container
        docker rm verify-container