version: '3.8'

services:
  # Database service - foundational service
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${DB_NAME:-myapp}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Cache service
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Web application with wait-for-it
  webapp:
    build: ./app
    container_name: web_app
    environment:
      DB_HOST: postgres
      DB_NAME: ${DB_NAME:-myapp}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password123}
      REDIS_HOST: redis
      NODE_ENV: production
    ports:
      - "3000:3000"
    volumes:
      - ./wait-for-it:/wait-for-it
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: ["/wait-for-it/wait-for-it.sh", "postgres:5432", "--", "/wait-for-it/wait-for-it.sh", "redis:6379", "--", "npm", "start"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./wait-for-it:/wait-for-it
    networks:
      - app-network
    depends_on:
      webapp:
        condition: service_healthy
    restart: unless-stopped
    command: ["/wait-for-it/wait-for-it.sh", "webapp:3000", "--", "nginx", "-g", "daemon off;"]

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge